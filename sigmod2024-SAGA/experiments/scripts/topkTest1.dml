#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# Generate the logical pipelines for data cleaning

source("scripts/pipelines/scripts/utils.dml") as utils;
sep=$sep
# read the inputs
F = read($dirtyData, data_type="frame", format="csv", header=TRUE, 
  naStrings= ["NA", "null","  ","NaN", "_nan_", "", "?", " ", "nan", "inf", "NAN", "99999", "99999.00"], sep=$sep);

metaInfo = read($metaData, data_type="frame", format="csv", header=FALSE);
primitives = read($primitives, data_type = "frame", format="csv", header= TRUE)
param = read($parameters, data_type = "frame", format="csv", header= TRUE)
topK = $topk
resources = $rv
expectedIncrease=$expectedIncrease
sample=$sample
output=$output
max_iter=$max_iter
testCV = as.logical($testCV)
cvk = as.integer($cvk)
trainTestSplit = as.double($split)
evalFunc = $func
split = nrow(F) * trainTestSplit
enablePruning = $enablePruning
seed=$seed
if(testCV) {

  trainData = F
  testData = as.frame("0")
}
else {

  trainData = F[1:split,]
  testData = F[split+1:nrow(F),]
}
evalFunHp = as.matrix(NaN)
if(nrow(metaInfo) < 2)
  metaInfo = as.frame("NULL")
else if(nrow(metaInfo) > 3) {
  evalFunHp = as.matrix(metaInfo[4, 2:ncol(metaInfo)])
   metaInfo = metaInfo[, 2:ncol(metaInfo)]
}
else
  metaInfo = metaInfo[, 2:ncol(metaInfo)]
# # # split in train/test 70/30

print(toString(metaInfo))
[topKPipelines, topKHyperParams, topKScores, baseLineScore, evalFunHp, applyFunc] = topk_cleaning(dataTrain=trainData, dataTest=testData, metaData=metaInfo, primitives=primitives, parameters=param,
  evaluationFunc=evalFunc, evalFunHp=evalFunHp, topK=topK, expectedIncrease=expectedIncrease, max_iter=max_iter,
  resource_val=resources, cv=testCV, cvk=cvk, sample=sample, isLastLabel=TRUE, enablePruning = enablePruning, seed=seed, correctTypos=FALSE) 

write(topKPipelines, output+"/pip.csv", format="csv")
write(topKHyperParams, output+"/hp.csv", format="csv")
write(topKScores, output+"/bestAcc.csv", format="csv")
write(baseLineScore, output+"/dirtyScore.csv", format="csv")
write(evalFunHp, output+"/evalHp.csv", format="csv")
write(applyFunc, output+"/applyFunc.csv", format="csv")


# UDF for evaluation  

evalClassification = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] Xtest, Matrix[Double] Ytest, Matrix[Double] Xorig=as.matrix(0),
  Matrix[Double] evalFunHp)
return(Matrix[Double] output, Matrix[Double] error)
{
  if(is.na(as.scalar(evalFunHp[1,1])))
  {
    nc = max(Y);
    params = list("icpt", "reg", "tol")
    paramRanges = list(seq(0, 2, 1), 10^seq(1,-3), 10^seq(1,-5));
    dataArgs = list("X", "Y");
    trainArgs = list(X=X, Y=Y, icpt=-1, reg=-1, tol=-1, maxi=1000, maxii=0, verbose=FALSE);
    t1 = time()
    [B1,opt] = gridSearch(X=X, y=Y, train="multiLogReg", predict="accuracy", numB=(ncol(X)+1)*(nc-1),
      params=params, paramValues=paramRanges, dataArgs=dataArgs, trainArgs=trainArgs, cv=TRUE, cv=3, verbose=FALSE);
    print("time taken for gridsearch "+ (time() - t1)/1e9+"s")
    evalFunHp = as.matrix(opt) 
  }
  if(min(Y) == max(Y))
  {
    accuracy = as.matrix(0)
    a = 0
  }
  else {
    beta = multiLogReg(X=X, Y=Y, icpt=as.scalar(evalFunHp[1,1]), reg=as.scalar(evalFunHp[1,2]), tol=as.scalar(evalFunHp[1,3]), 
      maxi=1000, maxii=0, verbose=FALSE);
    [prob, yhat, accuracy] = multiLogRegPredict(Xtest, beta, Ytest, FALSE)
    error = yhat != Ytest
    accuracy = as.matrix(accuracy)
  }
  output = cbind(accuracy, evalFunHp)
  print("output: "+toString(output))
}


accuracy = function(Matrix[Double] X, Matrix[Double] y, Matrix[Double] B) return (Matrix[Double] err) {
  [M,yhat,acc] = multiLogRegPredict(X=X, B=B, Y=y, verbose=FALSE);
  err = as.matrix(1-(acc/100));
}
# UDF for evaluation  
# choice of parameters provided by API, X, Y, clone_X, evalFunHp (hyper-param), trainML (boolean for optimizing hp internally or passed by externally )
evalRegression = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] Xtest, Matrix[Double] Ytest, Matrix[Double] Xorig=as.matrix(0),
  Matrix[Double] evalFunHp)
return(Matrix[Double] output, Matrix[Double] error)
{
  Xtest = replace(target=Xtest, pattern = NaN, replacement = 0)
  X = replace(target=X, pattern = NaN, replacement = 0)
  if(is.na(as.scalar(evalFunHp[1,1])))
  {
    # do the gridsearch for hyper-parameters
    params = list("icpt","reg", "tol");
    paramRanges = list(seq(0,2,1),10^seq(0,-4), 10^seq(-6,-12));
    t1 = time()
    [B1, opt] = gridSearch(X=X, y=Y, train="lm", predict="RsquaredLoss",
      numB=ncol(X)+1, params=params, paramValues=paramRanges, cv=TRUE, cvk=3);
    print("time taken for gridsearch "+ (time() - t1)/1e9+"s")
    evalFunHp = as.matrix(opt)  
  }
  beta = lm(X=X, y=Y, icpt=as.scalar(evalFunHp[1,1]), reg=as.scalar(evalFunHp[1,2]), tol=as.scalar(evalFunHp[1,3]), 
    maxi=1000, verbose = TRUE);
  pred = lmPredict(X=Xtest, B=beta, ytest=Ytest, icpt=as.scalar(evalFunHp[1,1]));
  error = pred != Ytest  
  accuracy = Rsquared(Xtest, Ytest, beta)
  rms = rmse(Xtest, Ytest, beta)
  print("r-squared: "+toString(accuracy))
  print("rmse: "+toString(rms))
  output = cbind(accuracy, evalFunHp)
}
# # # adjusted R-square
Rsquared = function(Matrix[Double] X, Matrix[Double] y, Matrix[Double] B) return (Matrix[Double] gain) {
  # loss = as.matrix(sum((y - X%*%B)^2));
  n = nrow(y)
  k = ncol(X)
  pred = lmPredict(X=X, B=B, ytest=y, verbose = TRUE);
  Rsqu = sum((y - pred)^2)/sum((y - mean(y))^2) #this will give the lose into range of [0,1]
  Rsqu = 1 - (Rsqu)
  # adjRsqu = 1 - (((n - 1)/(n - k - 1)) * (1 - Rsqu))
  gain = ifelse(is.na(as.matrix(Rsqu)), as.matrix(0), as.matrix(Rsqu))  
}


RsquaredLoss = function(Matrix[Double] X, Matrix[Double] y, Matrix[Double] B) return (Matrix[Double] loss) {
  n = nrow(y)
  k = ncol(X)
  pred = lmPredict(X=X, B=B, ytest=y);
  Rsqu = sum((y - pred)^2)/sum((y - mean(y))^2)
  Rsqu = 1 - (Rsqu)
  loss = ifelse(is.na(as.matrix(Rsqu)), as.matrix(0), as.matrix(Rsqu))  
}