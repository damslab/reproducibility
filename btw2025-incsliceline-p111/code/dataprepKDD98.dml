Forig = read("./data/KDD98.csv", data_type="frame", format="csv", header=TRUE);

F = Forig[,1:469];
y = as.matrix(Forig[,472])

# data preparation
bin = matrix(0, ncol(F), 1);
bin[5,] = 1;
bin[8,] = 1;
bin[17,] = 1;
bin[27,] = 1;
bin[44:50,] = matrix(1, 7, 1);
bin[54,] = 1;
bin[76:195,] = matrix(1, 195-76+1, 1);
bin[199:361,] = matrix(1, 361-199+1, 1);
bin[408,] = 1;
bin[410:412,] = matrix(1, 3, 1);
bin[435:469,] = matrix(1, 469-435+1, 1);

recode="1";
for(i in 2:nrow(bin))
  if( as.scalar(bin[i,])!=1 )
    recode = recode+","+i;
binning = "{id:5, method:equi-width, numbins:10}"
for(i in 6:nrow(bin))
  if( as.scalar(bin[i,])==1 )
    binning = binning+",\n{id:"+i+", method:equi-width, numbins:10}";

jspec= "{ ids:true, recode:["+recode+"], bin:["+binning+"]}"
[X,M] = transformencode(target=F, spec=jspec);
X = replace(target=X, pattern=NaN, replacement=0);
X = X + ((X==0) * t(bin==0)) * colMaxs(X)+1;

# one hot encoding
m = nrow(X)
n = ncol(X)
fdom = colMaxs(X);
foffb = t(cumsum(t(fdom))) - fdom;
foffe = t(cumsum(t(fdom)))
rix = matrix(seq(1,m)%*%matrix(1,1,n), m*n, 1)
cix = matrix(X + foffb, m*n, 1);
X2 = table(rix, cix); #one-hot encoded

# learn model
B = lm(X=X2, y=y, icpt=1, reg=0.0001, verbose=TRUE);
yhat = X2 %*% B[1:ncol(X2),] + as.scalar(B[ncol(X)+1,]);
e = (y-yhat)^2;

write(X, "data/KDD98_X.csv", format="csv")
write(e, "data/KDD98_o_e.csv", format="csv")
