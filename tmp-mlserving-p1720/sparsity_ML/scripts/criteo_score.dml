getModelSparsity = function(Matrix[Double] beta) return(Double sparsity) 
{
  tmp = beta != 0;
  sparsity = (nrow(beta)*ncol(beta) - sum(tmp))/nrow(beta);
}

# Read the cleaned Criteo data
data = read("file:/home/arnab/datasets/criteo_day21_5M_cleaned", 
    data_type="frame", format="csv", header=FALSE,
    naStrings=["NA", "na", "null", "NaN", "nan", "", "?"]);
# Bin(13) w/ 5 bins, DC(26), RC(1)
jspec = read("file:/home/arnab/datasets/criteo_fe4.json", data_type="scalar", value_type="string");
[X, Meta] = transformencode(target=data, spec=jspec);
print("("+nrow(data)+", "+ncol(data)+")");

# Train-test split at 70%.
[Xtrain, Xtest, Ytrain, Ytest] = split(X=X[,2:ncol(X)], Y=X[,1]);
print("("+nrow(Xtrain)+", "+ncol(Xtrain)+")");

# Find the baseline accuracies with all features.
model = multiLogReg(X=Xtrain, Y=Ytrain, maxi=50, verbose=FALSE);
avg = 0;
for (i in 1:6) {
  Xtmp = X[,2:ncol(X)];
  Ytmp = X[,1];
  t3 = time();
  [M, Ypred, acc] = multiLogRegPredict(X=Xtmp, B=model, Y=Ytmp);
  t4 = time();
  avg = avg + floor((t4-t3)/1000000);
}
print("Baseline Scoring Time on Entire Dataset: " + floor(avg/6)+" millsec");

for (tau in seq(700, 2100, 200)) {
  # Feature selection using lasso
  beta = lasso(X=Xtrain, y=Ytrain, tau=tau, verbose=FALSE);
  sp = getModelSparsity(beta);
  print("Tau: " + tau + ", Model Sparsity: " + toString(sp));

  # Remove the 0th features from train and test
  selCols = beta != 0;
  X_train_fe = removeEmpty(target=Xtrain, margin="cols", select=t(selCols));
  X_fe = removeEmpty(target=X[,2:ncol(X)], margin="cols", select=t(selCols));

  # Find the train, test accuracy after feature selection
  t1 = time();
  model = multiLogReg(X=X_train_fe, Y=Ytrain, maxi=50, verbose=FALSE);
  t2 = time();
  print("Tau: " + tau + ", Model Sparsity: " + toString(sp) + ", Training Time: " + floor((t2-t1)/1000000)+" millsec");

  # Measure scoring time on full dataset
  avg = 0;
  for (i in 1:6) {
    Ytmp = X[,1];
    t3 = time();
    [M, Ypred, acc] = multiLogRegPredict(X=X_fe, B=model, Y=Ytmp);
    t4 = time();
    avg = avg + floor((t4-t3)/1000000);
  }
  print("Scoring Time on Entire Dataset: " + floor(avg/6)+" millsec");
}

